import java.util.Stack;
class Solution {
    public int solution(String s) {
        int answer = 0;
        int size = s.length();
        String str = s + s;
        
        for(int i=0; i<size; i++){
            Stack<String> stack = new Stack<>();
            boolean check = false;
            for(int j=i; j<size+i; j++){
                if(str.substring(j, j+1).equals("[") || str.substring(j, j+1).equals("{") || 
                  str.substring(j, j+1).equals("(")){
                    stack.push(str.substring(j, j+1));
                }
                else if(str.substring(j,j+1).equals("]")){
                    if(!stack.isEmpty() && stack.peek().equals("[")){
                        stack.pop();
                    }
                    else{
                        check = true;
                        break;
                    }
                }
                else if(str.substring(j,j+1).equals("}")){
                    if(!stack.isEmpty() && stack.peek().equals("{")){
                        stack.pop();
                    }
                    else{
                        check = true;
                        break;
                    }
                }
                else if(str.substring(j,j+1).equals(")")){
                    if(!stack.isEmpty() && stack.peek().equals("(")){
                        stack.pop();
                    }
                    else{
                        check = true;
                        break;
                    }
                }
            }
            if(!stack.isEmpty()){
                check = true;
            }
            if(!check){
                answer++;
            }
        }
        return answer;
    }
}
